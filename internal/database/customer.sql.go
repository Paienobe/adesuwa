// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customer.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const findCustomerByEmail = `-- name: FindCustomerByEmail :one
SELECT id, first_name, last_name, email, phone_number, country, profile_image, password, created_at, updated_at FROM customer WHERE email = $1
`

func (q *Queries) FindCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, findCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Country,
		&i.ProfileImage,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, first_name, last_name, email, phone_number, country, profile_image, password, created_at, updated_at FROM customer WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Country,
		&i.ProfileImage,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerCustomer = `-- name: RegisterCustomer :one
INSERT into customer (id, first_name, last_name, email, phone_number, country, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, first_name, last_name, email, phone_number, country, profile_image, password, created_at, updated_at
`

type RegisterCustomerParams struct {
	ID          uuid.UUID
	FirstName   string
	LastName    string
	Email       string
	PhoneNumber string
	Country     string
	Password    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) RegisterCustomer(ctx context.Context, arg RegisterCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, registerCustomer,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Country,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Country,
		&i.ProfileImage,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

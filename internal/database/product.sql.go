// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: product.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (id, name, images, price, amount_available, category, discount, description, created_at, updated_at, vendor_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, name, images, price, amount_available, category, discount, description, created_at, updated_at, vendor_id
`

type CreateProductParams struct {
	ID              uuid.UUID
	Name            string
	Images          []string
	Price           float64
	AmountAvailable int32
	Category        string
	Discount        int32
	Description     string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	VendorID        uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		pq.Array(arg.Images),
		arg.Price,
		arg.AmountAvailable,
		arg.Category,
		arg.Discount,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.VendorID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Images),
		&i.Price,
		&i.AmountAvailable,
		&i.Category,
		&i.Discount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VendorID,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAllVendorProducts = `-- name: GetAllVendorProducts :many
SELECT id, name, images, price, amount_available, category, discount, description, created_at, updated_at, vendor_id FROM product
WHERE vendor_id = $1
`

func (q *Queries) GetAllVendorProducts(ctx context.Context, vendorID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllVendorProducts, vendorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			pq.Array(&i.Images),
			&i.Price,
			&i.AmountAvailable,
			&i.Category,
			&i.Discount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VendorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET 
  name = $1, 
  images = COALESCE($2, images),  -- Use COALESCE to handle null values
  price = $3, 
  amount_available = $4, 
  discount = $5, 
  description = $6, 
  updated_at = CURRENT_TIMESTAMP
WHERE id = $7
RETURNING id, name, images, price, amount_available, category, discount, description, created_at, updated_at, vendor_id
`

type UpdateProductParams struct {
	Name            string
	Images          []string
	Price           float64
	AmountAvailable int32
	Discount        int32
	Description     string
	ID              uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		pq.Array(arg.Images),
		arg.Price,
		arg.AmountAvailable,
		arg.Discount,
		arg.Description,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		pq.Array(&i.Images),
		&i.Price,
		&i.AmountAvailable,
		&i.Category,
		&i.Discount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VendorID,
	)
	return i, err
}
